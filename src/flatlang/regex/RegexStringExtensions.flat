package flatlang/regex

import flatlang/datastruct/list/StringCharArray

extension {
  public replace(String this, Pattern pattern, String replace) -> String {
    var output = this
    var Int offset = 0

    Regex.getMatches(pattern, this).forEach(match => {
    	output = output.substring(0, match.start + offset) + replace + output.substring(match.end + offset)
    	offset += replace.count - match.count
    })

    return output
  }

  public startsWith(String this, Pattern search) => indexOf(search) == 0
  public contains(String this, Pattern search) => indexOf(search) >= 0
  public endsWith(String this, Pattern search) => count > 0 && indexOf(search) == count - search.pattern.count

  public matches(String this, Pattern pattern) -> Bool {
  	var matches = Regex.getMatches(pattern, this)

  	return matches.count == 1 && matches[0].start == 0 && matches[0].end == count
  }

  /// Get the first index at or after the start index that the given pattern occurs.
  ///
  /// search: The pattern to search for a match for.
  /// start: The index in the string to start the search at.
  /// direction: The direction to search in, positive = to the right, negative = to the left.
  /// defaultReturnValue: The default value returned if no match is met.
  /// return: The index of the match.
  public indexOf(String this, Pattern search, Int start = 0, Int direction = 1, Int defaultReturnValue = -1) => defaultReturnValue {
  	var first = Regex.getMatches(search, this).first

  	if (first) {
  		return first.start
  	}
  }
}